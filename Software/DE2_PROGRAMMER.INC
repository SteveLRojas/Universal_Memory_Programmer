;                     /\         /\__
;                   // \       (  0 )_____/\            __
;                  // \ \     (vv          o|          /^v\
;                //    \ \   (vvvv  ___-----^        /^^/\vv\
;              //  /     \ \ |vvvvv/               /^^/    \v\
;             //  /       (\\/vvvv/              /^^/       \v\
;            //  /  /  \ (  /vvvv/              /^^/---(     \v\
;           //  /  /    \( /vvvv/----(O        /^^/           \v\
;          //  /  /  \  (/vvvv/               /^^/             \v|
;        //  /  /    \( vvvv/                /^^/               ||
;       //  /  /    (  vvvv/                 |^^|              //
;      //  / /    (  |vvvv|                  /^^/            //
;     //  / /   (    \vvvvv\          )-----/^^/           //
;    // / / (          \vvvvv\            /^^^/          //
;   /// /(               \vvvvv\        /^^^^/          //
;  ///(              )-----\vvvvv\    /^^^^/-----(      \\
; //(                        \vvvvv\/^^^^/               \\
;/(                            \vvvv^^^/                 //
;                                \vv^/         /        //
;                                             /<______//
;                                            <<<------/
;                                             \<
;                                              \
;**************************************************
;* DE2_PROGRAMMER.INC            HEADER FILE      *
;* Copyright (C) 2022 Esteban Looser-Rojas.       *
;* Contains register defines for the NeonFox CPU  *
;* and address defines for platform peripherals.  *
;* Addresses are for the DE2 programmer platform. *
;**************************************************

;Address map for IO space:
; 0x0000 to 0xFFBF	unused
; 0xFFC0 to 0xFFCF	unused
; 0xFFD0 to 0xFFD7	IOMM2 (read write)
; 0xFFD8 to 0xFFDF	IOMM0 (read write)
; 0xFFE0 to 0xFFE7	IOMM1 (read write)
; 0xFFE8 to 0xFFEB	RS-232 module
; 0xFFEC to 0xFFED	unused
; 0xFFEE to 0xFFEF	interrupt controller (read write)
; 0xFFF0 to 0xFFF3	timer module (read write)
; 0xFFF4 to 0xFFF5	keyboard module (read write)
; 0xFFF6 to 0xFFF9	unused
; 0xFFFA to 0xFFFB	led indicators (write only)
; 0xFFFC to 0xFFFD	hex display (write only)
; 0xFFFE to 0xFFFF	unused

;Address map for data and program space:
; 0x00000000 to 0x00003FFF	32KB main memory
; 0x00004000 to 0xFFFFFFFF	Not implemented

; REMEMBER: PROGRAM AND DATA MEMORIES ARE BOTH WORD ADDRESSABLE!

; RS-232 module address map
; 0 data register
; 1 status register
;		bit 0: TX overwrite (LSB)
;		bit 1: RX overwrite
;		bit 2: TX ready
;		bit 3: RX ready
;		bit 4: TX queue empty
;		bit 5: RX queue full
;		bit 6: reserved
;		bit 7: busy flag
; 2 clk_div_l
; 3 clk_div_h

; keyboard module address map
; 0 data register
; 1 status register
;		bit 0: TX overwrite (LSB)
;		bit 1: RX overwrite
;		bit 2: TX ready
;		bit 3: RX ready
;		bit 4: TX queue empty
;		bit 5: RX queue full

; Timer module address map
; 0 counter bits 7:0
; 1 counter bits 15:8
; 2 counter bits 23:16
; 3 status
;		bit 0: counter 7:0 not zero
;		bit 1: counter 15:8 not zero
;		bit 2: counter 23:16 not zero
;		bit 3: counter 23:0 not zero
;		bit 4: VSYNC
;		bit 5: HSYNC

; Interrupt controller address map
; 0 status register
; 1 control register

AUX0	EQU R16
AUX1 	EQU R17
AUX2 	EQU R18
AUX3	EQU R19
DAL		EQU R20
DAH		EQU R21
IAL		EQU R22
IAH		EQU R23
DD		EQU R24
ID		EQU R25
CAL		EQU R26
CAH 	EQU R27
RAL 	EQU R28
RAH 	EQU R29
STATUS 	EQU R30
ZERO	EQU R31

TIMER_COUNT_0 EQU $FFF0
TIMER_COUNT_1 EQU $FFF1
TIMER_COUNT_2 EQU $FFF2
TIMER_STATUS EQU $FFF3

KB_DATA EQU $FFF4
KB_STATUS EQU $FFF5

HEX_INDICATORS EQU $FFFC
LED_INDICATORS EQU $FFFA

HEX_INDICATORS_L	EQU $FFFC
HEX_INDICATORS_H	EQU $FFFD
LED_INDICATORS_G	EQU $FFFA
LED_INDICATORS_R	EQU $FFFB

UART_DATA		EQU $FFE8
UART_STATUS		EQU $FFE9
UART_CLK_DIV_L	EQU $FFEA
UART_CLK_DIV_H	EQU $FFEB

INTERRUPT_STATUS EQU $FFEE
INTERRUPT_CONTROL EQU $FFEF

IOMM0_WRITE_ADDR_HIGH 	EQU $FFD8
IOMM0_WRITE_ADDR_LOW 	EQU $FFD9
IOMM0_WRITE_ADDR_INC 	EQU $FFDA
IOMM0_MEM_DATA 			EQU $FFDB
IOMM0_READ_ADDR_HIGH 	EQU $FFDC
IOMM0_READ_ADDR_LOW 	EQU $FFDD
IOMM0_READ_ADDR_INC	 	EQU $FFDE
IOMM0_STATUS 			EQU $FFDF

IOMM1_WRITE_ADDR_HIGH 	EQU $FFE0
IOMM1_WRITE_ADDR_LOW 	EQU $FFE1
IOMM1_WRITE_ADDR_INC 	EQU $FFE2
IOMM1_MEM_DATA 			EQU $FFE3
IOMM1_READ_ADDR_HIGH 	EQU $FFE4
IOMM1_READ_ADDR_LOW 	EQU $FFE5
IOMM1_READ_ADDR_INC	 	EQU $FFE6
IOMM1_STATUS 			EQU $FFE7

IOMM2_WRITE_ADDR_HIGH 	EQU $FFD0
IOMM2_WRITE_ADDR_LOW 	EQU $FFD1
IOMM2_WRITE_ADDR_INC 	EQU $FFD2
IOMM2_MEM_DATA			EQU $FFD3
IOMM2_READ_ADDR_HIGH 	EQU $FFD4
IOMM2_READ_ADDR_LOW 	EQU $FFD5
IOMM2_READ_ADDR_INC		EQU $FFD6
IOMM2_STATUS 			EQU $FFD7

ROM_END		EQU $3FFF		;PAD FILE TO 16K WORDS
BUFFER_SIZE	EQU $2000		;BUFFER SIZE IN WORDS
NUM_TARGETS	EQU $03

;VARIABLES
SERIAL_NUM_WORDS	EQU $3FFF

FLASH_NUM_WORDS		EQU $3FFE

SRAM_NUM_WORDS		EQU $3FFD

SDRAM_NUM_WORDS		EQU $3FFC

FLASH_ADDRESS_H	EQU $3FFB
FLASH_ADDRESS_L	EQU $3FFA

FLASH_BYTE_ADDR_H	EQU $3FF9
FLASH_BYTE_ADDR_L	EQU $3FF8

BUFFER_END		EQU $3FF7
BUFFER_START	EQU $1FF8	;SDRAM LIBRARY NEEDS THIS TO BE ALIGNED TO A MULTIPLE OF 4

WORDS_REMAINING_H	EQU $1FF7
WORDS_REMAINING_L	EQU $1FF6

SRAM_ADDRESS_H		EQU $1FF5
SRAM_ADDRESS_L		EQU $1FF4

SDRAM_ADDRESS_H		EQU $1FF3
SDRAM_ADDRESS_L		EQU $1FF2

FPTR_MEM_ERASE_BLOCK	EQU $1FF1

FPTR_MEM_SET_ADDR_WRITE		EQU $1FF0

FPTR_MEM_SET_ADDR_READ		EQU $1FEF

FPTR_MEM_GET_N_WORDS	EQU $1FEE

FPTR_MEM_SEND_N_WORDS	EQU $1FED

FPTR_MEM_ERASE_ALL		EQU $1FEC

FPTR_MEM_UNLOCK_ALL		EQU $1FEB

FPTR_MEM_LOCK_ALL		EQU $1FEA

FPTR_MEM_GET_STATUS		EQU $1FE9

FPTR_MEM_LOCK_BLOCK		EQU $1FE8

DPTR_TARGET_DESCRIPTOR	EQU $1FE7

DPTR_MEM_NUM_WORDS		EQU $1FE6

DPTR_MEM_ADDRESS		EQU $1FE5

DPTR_MEMORY_SIZE		EQU $1FE4

;MACROS

MACRO PLATFORM_STRINGS
PLATFORM_DESCRIPTOR
	DATA 't'
	DATA 'e'
	DATA 'r'
	DATA 'a'
	DATA 's'
	DATA 'I'
	DATA 'C'
	DATA ' '
	DATA 'D'
	DATA 'E'
	DATA '2'
	DATA '\0'

TARGET_DESCRIPTORS
	DATA `LW FLASH_DESCRIPTOR
	DATA `LW SRAM_DESCRIPTOR
	DATA `LW SDRAM_DESCRIPTOR

FLASH_DESCRIPTOR
	DATA 'F'
	DATA 'l'
	DATA 'a'
	DATA 's'
	DATA 'h'
	DATA '\0'

SRAM_DESCRIPTOR
	DATA 'S'
	DATA 'R'
	DATA 'A'
	DATA 'M'
	DATA '\0'

SDRAM_DESCRIPTOR
	DATA 'S'
	DATA 'D'
	DATA 'R'
	DATA 'A'
	DATA 'M'
	DATA '\0'

TARGET_SIZE
	DATA $0000	;FLASH SIZE
	DATA $0040
	DATA $0000	;SRAM SIZE
	DATA $0008
	DATA $0000	;SDRAM SIZE
	DATA $0080
ENDMACRO PLATFORM_STRINGS

MACRO INIT_PLATFORM
	LIM H, AUX0, `LH SERIAL_INIT
	LIM L, AUX0, `LL SERIAL_INIT
	MOVE W, AUX0, CAL
	LIM H, AUX0, `LH 433	;CLOCK DIVIDER
	LIM L, AUX0, `LL 433
	CALL
	MOVE W, AUX0, R0

	LIM H, AUX0, `LH FLASH_INIT
	LIM L, AUX0, `LL FLASH_INIT
	MOVE W, AUX0, CAL
	CALL
	NOP

	LIM H, AUX0, `LH SRAM_INIT
	LIM L, AUX0, `LL SRAM_INIT
	MOVE W, AUX0, CAL
	CALL
	NOP

	LIM H, AUX0, `LH SDRAM_INIT
	LIM L, AUX0, `LL SDRAM_INIT
	MOVE W, AUX0, CAL
	CALL
	NOP

	LIM H, AUX0, `LH DPTR_TARGET_DESCRIPTOR
	LIM L, AUX0, `LL DPTR_TARGET_DESCRIPTOR
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH TARGET_DESCRIPTORS
	LIM L, AUX0, `LL TARGET_DESCRIPTORS			
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_SET_ADDR_WRITE
	LIM L, AUX0, `LL FPTR_MEM_SET_ADDR_WRITE
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_SET_ADDRESS_WRITE
	LIM L, AUX0, `LL FLASH_SET_ADDRESS_WRITE
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_SET_ADDR_READ
	LIM L, AUX0, `LL FPTR_MEM_SET_ADDR_READ
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_SET_ADDRESS_READ
	LIM L, AUX0, `LL FLASH_SET_ADDRESS_READ
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_GET_N_WORDS
	LIM L, AUX0, `LL FPTR_MEM_GET_N_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_GET_N_WORDS
	LIM L, AUX0, `LL FLASH_GET_N_WORDS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_SEND_N_WORDS
	LIM L, AUX0, `LL FPTR_MEM_SEND_N_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_SEND_N_WORDS
	LIM L, AUX0, `LL FLASH_SEND_N_WORDS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_ERASE_ALL
	LIM L, AUX0, `LL FPTR_MEM_ERASE_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_ERASE_ALL_BLOCKS
	LIM L, AUX0, `LL FLASH_ERASE_ALL_BLOCKS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_UNLOCK_ALL
	LIM L, AUX0, `LL FPTR_MEM_UNLOCK_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_UNLOCK_ALL_BLOCKS
	LIM L, AUX0, `LL FLASH_UNLOCK_ALL_BLOCKS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_LOCK_ALL
	LIM L, AUX0, `LL FPTR_MEM_LOCK_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_LOCK_ALL_BLOCKS
	LIM L, AUX0, `LL FLASH_LOCK_ALL_BLOCKS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_GET_STATUS
	LIM L, AUX0, `LL FPTR_MEM_GET_STATUS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_NULL
	LIM L, AUX0, `LL FLASH_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_LOCK_BLOCK
	LIM L, AUX0, `LL FPTR_MEM_LOCK_BLOCK
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_LOCK_BLOCK
	LIM L, AUX0, `LL FLASH_LOCK_BLOCK
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_ERASE_BLOCK
	LIM L, AUX0, `LL FPTR_MEM_ERASE_BLOCK
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_ERASE_BLOCK
	LIM L, AUX0, `LL FLASH_ERASE_BLOCK
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH DPTR_MEM_NUM_WORDS
	LIM L, AUX0, `LL DPTR_MEM_NUM_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_NUM_WORDS
	LIM L, AUX0, `LL FLASH_NUM_WORDS
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_NUM_WORDS

	LIM H, AUX0, `LH DPTR_MEM_ADDRESS
	LIM L, AUX0, `LL DPTR_MEM_ADDRESS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_ADDRESS_L
	LIM L, AUX0, `LL FLASH_ADDRESS_L
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH DPTR_MEMORY_SIZE
	LIM L, AUX0, `LL DPTR_MEMORY_SIZE
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH TARGET_SIZE
	LIM L, AUX0, `LL TARGET_SIZE
	MOVE W, AUX0, DD		;SET POINTER TO TARGET_SIZE
ENDMACRO INIT_PLATFORM

MACRO SET_TARGET
	LIM L, AUX0, $00
	XOR L, R11, ZERO
	BRZ M_ST_FLASH

	LIM L, AUX0, $01
	XOR L, R11, ZERO
	BRZ M_ST_SRAM

	LIM L, AUX0, $02
	XOR L, R11, ZERO
	BRZ M_ST_SDRAM
	NOP

	MOVE W, ZERO, R11	;IF AN INVALID TARGET IS SPECIFIED THE DEFAULT TARGET IS SET

M_ST_FLASH
	LIM H, AUX0, `LH FPTR_MEM_SET_ADDR_WRITE
	LIM L, AUX0, `LL FPTR_MEM_SET_ADDR_WRITE
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_SET_ADDRESS_WRITE
	LIM L, AUX0, `LL FLASH_SET_ADDRESS_WRITE
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_SET_ADDR_READ
	LIM L, AUX0, `LL FPTR_MEM_SET_ADDR_READ
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_SET_ADDRESS_READ
	LIM L, AUX0, `LL FLASH_SET_ADDRESS_READ
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_GET_N_WORDS
	LIM L, AUX0, `LL FPTR_MEM_GET_N_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_GET_N_WORDS
	LIM L, AUX0, `LL FLASH_GET_N_WORDS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_SEND_N_WORDS
	LIM L, AUX0, `LL FPTR_MEM_SEND_N_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_SEND_N_WORDS
	LIM L, AUX0, `LL FLASH_SEND_N_WORDS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_ERASE_ALL
	LIM L, AUX0, `LL FPTR_MEM_ERASE_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_ERASE_ALL_BLOCKS
	LIM L, AUX0, `LL FLASH_ERASE_ALL_BLOCKS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_UNLOCK_ALL
	LIM L, AUX0, `LL FPTR_MEM_UNLOCK_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_UNLOCK_ALL_BLOCKS
	LIM L, AUX0, `LL FLASH_UNLOCK_ALL_BLOCKS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_LOCK_ALL
	LIM L, AUX0, `LL FPTR_MEM_LOCK_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_LOCK_ALL_BLOCKS
	LIM L, AUX0, `LL FLASH_LOCK_ALL_BLOCKS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_GET_STATUS
	LIM L, AUX0, `LL FPTR_MEM_GET_STATUS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_NULL
	LIM L, AUX0, `LL FLASH_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_LOCK_BLOCK
	LIM L, AUX0, `LL FPTR_MEM_LOCK_BLOCK
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_LOCK_BLOCK
	LIM L, AUX0, `LL FLASH_LOCK_BLOCK
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_ERASE_BLOCK
	LIM L, AUX0, `LL FPTR_MEM_ERASE_BLOCK
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_ERASE_BLOCK
	LIM L, AUX0, `LL FLASH_ERASE_BLOCK
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH DPTR_MEM_NUM_WORDS
	LIM L, AUX0, `LL DPTR_MEM_NUM_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_NUM_WORDS
	LIM L, AUX0, `LL FLASH_NUM_WORDS
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH DPTR_MEM_ADDRESS
	LIM L, AUX0, `LL DPTR_MEM_ADDRESS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH FLASH_ADDRESS_L
	LIM L, AUX0, `LL FLASH_ADDRESS_L
	MOVE W, AUX0, DD
	BRA M_ST_END

M_ST_SRAM
	LIM H, AUX0, `LH FPTR_MEM_SET_ADDR_WRITE
	LIM L, AUX0, `LL FPTR_MEM_SET_ADDR_WRITE
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_SET_ADDRESS_WRITE
	LIM L, AUX0, `LL SRAM_SET_ADDRESS_WRITE
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_SET_ADDR_READ
	LIM L, AUX0, `LL FPTR_MEM_SET_ADDR_READ
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_SET_ADDRESS_READ
	LIM L, AUX0, `LL SRAM_SET_ADDRESS_READ
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_SET_ADDRESS_READ

	LIM H, AUX0, `LH FPTR_MEM_GET_N_WORDS
	LIM L, AUX0, `LL FPTR_MEM_GET_N_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_GET_N_WORDS
	LIM L, AUX0, `LL SRAM_GET_N_WORDS
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_GET_N_WORDS

	LIM H, AUX0, `LH FPTR_MEM_SEND_N_WORDS
	LIM L, AUX0, `LL FPTR_MEM_SEND_N_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_SEND_N_WORDS
	LIM L, AUX0, `LL SRAM_SEND_N_WORDS
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_SEND_N_WORDS

	LIM H, AUX0, `LH FPTR_MEM_ERASE_ALL
	LIM L, AUX0, `LL FPTR_MEM_ERASE_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_NULL
	LIM L, AUX0, `LL SRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_UNLOCK_ALL
	LIM L, AUX0, `LL FPTR_MEM_UNLOCK_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_NULL
	LIM L, AUX0, `LL SRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_LOCK_ALL
	LIM L, AUX0, `LL FPTR_MEM_LOCK_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_NULL
	LIM L, AUX0, `LL SRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_GET_STATUS
	LIM L, AUX0, `LL FPTR_MEM_GET_STATUS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_NULL
	LIM L, AUX0, `LL SRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_LOCK_BLOCK
	LIM L, AUX0, `LL FPTR_MEM_LOCK_BLOCK
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_NULL
	LIM L, AUX0, `LL SRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_ERASE_BLOCK
	LIM L, AUX0, `LL FPTR_MEM_ERASE_BLOCK
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_NULL
	LIM L, AUX0, `LL SRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH DPTR_MEM_NUM_WORDS
	LIM L, AUX0, `LL DPTR_MEM_NUM_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_NUM_WORDS
	LIM L, AUX0, `LL SRAM_NUM_WORDS
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_NUM_WORDS

	LIM H, AUX0, `LH DPTR_MEM_ADDRESS
	LIM L, AUX0, `LL DPTR_MEM_ADDRESS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SRAM_ADDRESS_L
	LIM L, AUX0, `LL SRAM_ADDRESS_L
	MOVE W, AUX0, DD
	BRA M_ST_END

M_ST_SDRAM
	LIM H, AUX0, `LH FPTR_MEM_SET_ADDR_WRITE
	LIM L, AUX0, `LL FPTR_MEM_SET_ADDR_WRITE
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_SET_ADDRESS_WRITE
	LIM L, AUX0, `LL SDRAM_SET_ADDRESS_WRITE
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_SET_ADDRESS_WRITE

	LIM H, AUX0, `LH FPTR_MEM_SET_ADDR_READ
	LIM L, AUX0, `LL FPTR_MEM_SET_ADDR_READ
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_SET_ADDRESS_READ
	LIM L, AUX0, `LL SDRAM_SET_ADDRESS_READ
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_SET_ADDRESS_READ

	LIM H, AUX0, `LH FPTR_MEM_GET_N_WORDS
	LIM L, AUX0, `LL FPTR_MEM_GET_N_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_GET_N_WORDS
	LIM L, AUX0, `LL SDRAM_GET_N_WORDS
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_GET_N_WORDS

	LIM H, AUX0, `LH FPTR_MEM_SEND_N_WORDS
	LIM L, AUX0, `LL FPTR_MEM_SEND_N_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_SEND_N_WORDS
	LIM L, AUX0, `LL SDRAM_SEND_N_WORDS
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_SEND_N_WORDS

	LIM H, AUX0, `LH FPTR_MEM_ERASE_ALL
	LIM L, AUX0, `LL FPTR_MEM_ERASE_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_NULL
	LIM L, AUX0, `LL SDRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_UNLOCK_ALL
	LIM L, AUX0, `LL FPTR_MEM_UNLOCK_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_NULL
	LIM L, AUX0, `LL SDRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_LOCK_ALL
	LIM L, AUX0, `LL FPTR_MEM_LOCK_ALL
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_NULL
	LIM L, AUX0, `LL SDRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_GET_STATUS
	LIM L, AUX0, `LL FPTR_MEM_GET_STATUS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_NULL
	LIM L, AUX0, `LL SDRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_LOCK_BLOCK
	LIM L, AUX0, `LL FPTR_MEM_LOCK_BLOCK
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_NULL
	LIM L, AUX0, `LL SDRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH FPTR_MEM_ERASE_BLOCK
	LIM L, AUX0, `LL FPTR_MEM_ERASE_BLOCK
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_NULL
	LIM L, AUX0, `LL SDRAM_NULL
	MOVE W, AUX0, DD

	LIM H, AUX0, `LH DPTR_MEM_NUM_WORDS
	LIM L, AUX0, `LL DPTR_MEM_NUM_WORDS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_NUM_WORDS
	LIM L, AUX0, `LL SDRAM_NUM_WORDS
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_NUM_WORDS

	LIM H, AUX0, `LH DPTR_MEM_ADDRESS
	LIM L, AUX0, `LL DPTR_MEM_ADDRESS
	MOVE W, AUX0, DAL
	LIM H, AUX0, `LH SDRAM_ADDRESS_L
	LIM L, AUX0, `LL SDRAM_ADDRESS_L
	MOVE W, AUX0, DD		;SET POINTER TO SDRAM_ADDRESS_L

M_ST_END
	LIM H, AUX0, `LH DPTR_MEMORY_SIZE
	LIM L, AUX0, `LL DPTR_MEMORY_SIZE
	MOVE W, AUX0, DAL
	MOVE L, R11, AUX0
	ADD L, R11, AUX0
	LIM H, AUX1, `LH TARGET_SIZE
	LIM L, AUX1, `LL TARGET_SIZE
	MOVE H, ZERO, AUX0
	ADD W, AUX1, DD

	LIM H, AUX0, `LH DPTR_TARGET_DESCRIPTOR
	LIM L, AUX0, `LL DPTR_TARGET_DESCRIPTOR
	MOVE W, AUX0, DAL
	MOVE L, R11, AUX0
	LIM H, AUX1, `LH TARGET_DESCRIPTORS
	LIM L, AUX1, `LL TARGET_DESCRIPTORS
	MOVE H, ZERO, AUX0
	ADD W, AUX1, DD	
ENDMACRO SET_TARGET
