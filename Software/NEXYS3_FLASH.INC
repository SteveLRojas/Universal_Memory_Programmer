;                     /\         /\__
;                   // \       (  0 )_____/\            __
;                  // \ \     (vv          o|          /^v\
;                //    \ \   (vvvv  ___-----^        /^^/\vv\
;              //  /     \ \ |vvvvv/               /^^/    \v\
;             //  /       (\\/vvvv/              /^^/       \v\
;            //  /  /  \ (  /vvvv/              /^^/---(     \v\
;           //  /  /    \( /vvvv/----(O        /^^/           \v\
;          //  /  /  \  (/vvvv/               /^^/             \v|
;        //  /  /    \( vvvv/                /^^/               ||
;       //  /  /    (  vvvv/                 |^^|              //
;      //  / /    (  |vvvv|                  /^^/            //
;     //  / /   (    \vvvvv\          )-----/^^/           //
;    // / / (          \vvvvv\            /^^^/          //
;   /// /(               \vvvvv\        /^^^^/          //
;  ///(              )-----\vvvvv\    /^^^^/-----(      \\
; //(                        \vvvvv\/^^^^/               \\
;/(                            \vvvv^^^/                 //
;                                \vv^/         /        //
;                                             /<______//
;                                            <<<------/
;                                             \<
;                                              \
;**************************************************
;* NEXYS3_FLASH.INC            LIBRARY FILE       *
;* Copyright (C) 2023 Esteban Looser-Rojas.       *
;* Contains flash driver for the NEXYS3 flash     *
;* programmer project based on NeonFox CPU.       *
;**************************************************

;#############################################################################
FLASH_NULL
	LIM H, AUX0, $E0
	LIM L, AUX0, $00
	RET
	MOVE W, AUX0, R11
;#############################################################################

;#############################################################################
FLASH_INIT
	; CLEAR WRITE ADDRESS
	LIM H, AUX1, `LH IOMM0_WRITE_ADDR_HIGH
	LIM L, AUX1, `LL IOMM0_WRITE_ADDR_HIGH
	MOVE W, AUX1, IAL
	MOVE W, ZERO, ID

	LIM H, AUX1, `LH IOMM0_WRITE_ADDR_LOW
	LIM L, AUX1, `LL IOMM0_WRITE_ADDR_LOW
	MOVE W, AUX1, IAL
	MOVE W, ZERO, ID

	;CLEAR STATUS REGISTER
	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM W, AUX0, $50
	MOVE W, AUX0, ID	;SEND CLEAR STATUS REGISTER COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FI_WAIT_STATUS
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FI_WAIT_STATUS	;IF NOT SET KEEP WAITING

	;SEND READ ARRAY COMMAND
	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM H, AUX0, $00
	LIM L, AUX0, $FF
	MOVE W, AUX0, ID	;SEND READ ARRAY COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FI_WAIT_READ
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FI_WAIT_READ	;IF NOT SET KEEP WAITING
	NOP

	LIM H, AUX0, `LH IOMM0_WRITE_ADDR_INC
	LIM L, AUX0, `LL IOMM0_WRITE_ADDR_INC
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;DISABLE AUTO INCREMENT

	LIM H, AUX0, `LH IOMM0_READ_ADDR_INC
	LIM L, AUX0, `LL IOMM0_READ_ADDR_INC
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;DISABLE AUTO INCREMENT

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_SET_ADDRESS_WRITE
	LIM H, AUX1, `LH FLASH_ADDRESS_H		
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, DD, R4

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, DD, R3

	LIM H, AUX1, `LH IOMM0_WRITE_ADDR_HIGH
	LIM L, AUX1, `LL IOMM0_WRITE_ADDR_HIGH
	MOVE W, AUX1, IAL
	MOVE W, R4, ID

	LIM H, AUX1, `LH IOMM0_WRITE_ADDR_LOW
	LIM L, AUX1, `LL IOMM0_WRITE_ADDR_LOW
	MOVE W, AUX1, IAL
	MOVE W, R3, ID

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_SET_ADDRESS_READ
	;SET AUTO INCREMENT FOR READ
	LIM H, AUX0, `LH IOMM0_READ_ADDR_INC
	LIM L, AUX0, `LL IOMM0_READ_ADDR_INC
	MOVE W, AUX0, IAL
	LIM W, AUX0, $00
	MOVE W, AUX0, ID	;DISABLE AUTO INCREMENT

	LIM H, AUX1, `LH FLASH_ADDRESS_H		
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, DD, R4

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, DD, R3

	LIM H, AUX1, `LH IOMM0_READ_ADDR_HIGH
	LIM L, AUX1, `LL IOMM0_READ_ADDR_HIGH
	MOVE W, AUX1, IAL
	MOVE W, R4, ID

	LIM H, AUX1, `LH IOMM0_READ_ADDR_LOW
	LIM L, AUX1, `LL IOMM0_READ_ADDR_LOW
	MOVE W, AUX1, IAL
	MOVE W, R3, ID	;THIS TRIGGERS A READ

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FSAR_WAIT
	BITT W, ID, 1	;CHECK READ READY FLAG
	BRZ FSAR_WAIT	;IF NOT SET KEEP WAITING
	NOP

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_GET_WORD
	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;WRITE TO STATUS REGISTER TO INITIATE READ
FGW_WAIT
	BITT W, ID, 1	;CHECK READ READY FLAG
	BRZ FGW_WAIT	;IF NOT SET KEEP WAITING
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	RET
	MOVE W, ID, R11
;#############################################################################

;#############################################################################
FLASH_SEND_WORD_AUTO
	LIM H, AUX0, `LH IOMM0_WRITE_ADDR_INC
	LIM L, AUX0, `LL IOMM0_WRITE_ADDR_INC
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;DISABLE AUTO INCREMENT

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM W, AUX0, $40
	MOVE W, AUX0, ID	;SEND WORD PROGRAM COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FWW_WAIT_CMD
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FWW_WAIT_CMD	;IF NOT SET KEEP WAITING

	LIM H, AUX0, `LH IOMM0_WRITE_ADDR_INC
	LIM L, AUX0, `LL IOMM0_WRITE_ADDR_INC
	MOVE W, AUX0, IAL
	LIM W, AUX0, $01
	MOVE W, AUX0, ID	;ENABLE AUTO INCREMENT

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	MOVE W, R0, ID		;WRITE WORD

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FWW_WAIT_DATA
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FWW_WAIT_DATA	;IF NOT SET KEEP WAITING
	NOP

FWW_WAIT_BUSY
	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;WRITE TO STATUS REGISTER TO INITIATE READ
FWW_WAIT_STATUS
	BITT W, ID, 1		;CHECK READ READY FLAG
	BRZ FWW_WAIT_STATUS	;IF NOT SET KEEP WAITING
	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	BITT W, ID, 7		;CHECK READY FLAG FROM FLASH CHIP
	BRZ FWW_WAIT_BUSY
	NOP

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_ERASE_BLOCK
	LIM H, AUX0, `LH IOMM0_WRITE_ADDR_INC
	LIM L, AUX0, `LL IOMM0_WRITE_ADDR_INC
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;DISABLE AUTO INCREMENT

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM W, AUX0, $20
	MOVE W, AUX0, ID	;SEND BLOCK ERASE COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FEB_WAIT_SETUP
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FEB_WAIT_SETUP	;IF NOT SET KEEP WAITING

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM H, AUX0, $00
	LIM L, AUX0, $D0
	MOVE W, AUX0, ID	;SEND BLOCK ERASE COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FEB_WAIT_CONFIRM
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FEB_WAIT_CONFIRM	;IF NOT SET KEEP WAITING

FEB_WAIT_BUSY
	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;WRITE TO STATUS REGISTER TO INITIATE READ
FEB_WAIT_STATUS
	BITT W, ID, 1		;CHECK READ READY FLAG
	BRZ FEB_WAIT_STATUS	;IF NOT SET KEEP WAITING
	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	BITT W, ID, 7		;CHECK READY FLAG FROM FLASH CHIP
	BRZ FEB_WAIT_BUSY
	NOP

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_LOCK_BLOCK
	LIM H, AUX0, `LH IOMM0_WRITE_ADDR_INC
	LIM L, AUX0, `LL IOMM0_WRITE_ADDR_INC
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;DISABLE AUTO INCREMENT

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM W, AUX0, $60
	MOVE W, AUX0, ID	;SEND LOCK BLOCK COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FLB_WAIT_SETUP
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FLB_WAIT_SETUP	;IF NOT SET KEEP WAITING

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM W, AUX0, $01
	MOVE W, AUX0, ID	;SEND LOCK BLOCK COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FLB_WAIT_CONFIRM
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FLB_WAIT_CONFIRM	;IF NOT SET KEEP WAITING
	NOP

FLB_WAIT_BUSY
	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;WRITE TO STATUS REGISTER TO INITIATE READ
FLB_WAIT_STATUS
	BITT W, ID, 1		;CHECK READ READY FLAG
	BRZ FLB_WAIT_STATUS	;IF NOT SET KEEP WAITING
	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	BITT W, ID, 7		;CHECK READY FLAG FROM FLASH CHIP
	BRZ FLB_WAIT_BUSY
	NOP

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_UNLOCK_BLOCK
	LIM H, AUX0, `LH IOMM0_WRITE_ADDR_INC
	LIM L, AUX0, `LL IOMM0_WRITE_ADDR_INC
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;DISABLE AUTO INCREMENT

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM W, AUX0, $60
	MOVE W, AUX0, ID	;SEND BLOCK UNLOCK COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FUB_WAIT_SETUP
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FUB_WAIT_SETUP	;IF NOT SET KEEP WAITING

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM H, AUX0, $00
	LIM L, AUX0, $D0
	MOVE W, AUX0, ID	;SEND BLOCK UNLOCK COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FUB_WAIT_CONFIRM
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FUB_WAIT_CONFIRM	;IF NOT SET KEEP WAITING
	NOP

FUB_WAIT_BUSY
	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;WRITE TO STATUS REGISTER TO INITIATE READ
FUB_WAIT_STATUS
	BITT W, ID, 1		;CHECK READ READY FLAG
	BRZ FUB_WAIT_STATUS	;IF NOT SET KEEP WAITING
	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	BITT W, ID, 7		;CHECK READY FLAG FROM FLASH CHIP
	BRZ FUB_WAIT_BUSY

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_GET_N_WORDS
	;SET AUTO INCREMENT FOR READ
	LIM H, AUX0, `LH IOMM0_READ_ADDR_INC
	LIM L, AUX0, `LL IOMM0_READ_ADDR_INC
	MOVE W, AUX0, IAL
	LIM W, AUX0, $01
	MOVE W, AUX0, ID	;ENABLE AUTO INCREMENT

	;GET THE NUMBER OF WORDS
	LIM H, AUX1, `LH FLASH_NUM_WORDS
	LIM L, AUX1, `LL FLASH_NUM_WORDS
	MOVE W, AUX1, DAL
	MOVE W, DD, R3

	;SET STARTING ADDRESS IN MEMORY
	LIM H, AUX0, `LH BUFFER_START
	LIM L, AUX0, `LL BUFFER_START
	MOVE W, AUX0, R5

	;LOOP N TIMES
	TEST W, R3
	BRNZ FGNB_LOOP
	NOP
	RET

FGNB_LOOP
	;GET WORD
	LIM H, AUX0, `LH FLASH_GET_WORD
	LIM L, AUX0, `LL FLASH_GET_WORD
	MOVE W, AUX0, CAL
	CALL
	NOP

	;WRITE WORD
	MOVE W, R5, DAL
	MOVE W, R11, DD

	;INCREMENT DATA ADDRESS
	LIM W, AUX0, $01
	ADD W, R5, R5

	;DECREMENT COUNTER
	LIM W, AUX0, $01
	SUB W, R3, R3

	;CHECK IF ZERO
	BRNZ FGNB_LOOP
	NOP

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_SEND_N_WORDS
	;GET THE NUMBER OF WORDS
	LIM H, AUX1, `LH FLASH_NUM_WORDS
	LIM L, AUX1, `LL FLASH_NUM_WORDS
	MOVE W, AUX1, DAL
	MOVE W, DD, R3

	;SET STARTING ADDRESS IN MEMORY
	LIM H, AUX0, `LH BUFFER_START
	LIM L, AUX0, `LL BUFFER_START
	MOVE W, AUX0, R5

	;LOOP N TIMES
	TEST W, R3
	BRNZ FSNB_LOOP
	NOP
	RET

FSNB_LOOP
	;GET WORD
	MOVE W, R5, DAL
	;MOVE W, DD, R0

	;WRITE WORD
	LIM H, AUX0, `LH FLASH_SEND_WORD_AUTO
	LIM L, AUX0, `LL FLASH_SEND_WORD_AUTO
	MOVE W, AUX0, CAL

	MOVE W, DD, R0
	CALL
	NOP

	;INCREMENT DATA ADDRESS
	LIM W, AUX0, $01
	ADD W, R5, R5

	;DECREMENT COUNTER
	LIM W, AUX0, $01
	SUB W, R3, R3

	;CHECK IF ZERO
	BRNZ FSNB_LOOP
	NOP

	LIM H, AUX0, `LH IOMM0_WRITE_ADDR_INC
	LIM L, AUX0, `LL IOMM0_WRITE_ADDR_INC
	MOVE W, AUX0, IAL
	MOVE W, ZERO, ID	;DISABLE AUTO INCREMENT

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM W, AUX0, $50
	MOVE W, AUX0, ID	;SEND CLEAR STATUS REGISTER COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FSNB_WAIT_STATUS
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FSNB_WAIT_STATUS	;IF NOT SET KEEP WAITING

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM H, AUX0, $00
	LIM L, AUX0, $FF
	MOVE W, AUX0, ID	;SEND READ ARRAY COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FSNB_WAIT_READ
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FSNB_WAIT_READ	;IF NOT SET KEEP WAITING
	NOP

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_UNLOCK_ALL_BLOCKS
	LIM H, AUX1, `LH FLASH_ADDRESS_H
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, ZERO, DD

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, ZERO, DD

FUB_LOOP
	LIM H, AUX0, `LH FLASH_SET_ADDRESS_WRITE
	LIM L, AUX0, `LL FLASH_SET_ADDRESS_WRITE
	MOVE W, AUX0, CAL
	CALL
	NOP

	LIM H, AUX0, `LH FLASH_UNLOCK_BLOCK
	LIM L, AUX0, `LL FLASH_UNLOCK_BLOCK
	MOVE W, AUX0, CAL
	CALL
	NOP

	;GET FLASH ADDRESS IN R3, R4
	LIM H, AUX1, `LH FLASH_ADDRESS_H
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, DD, R3

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, DD, R4

	LIM H, AUX0, `LH HEX_INDICATORS
	LIM L, AUX0, `LL HEX_INDICATORS
	MOVE W, AUX0, IAL
	MOVE W, R3, ID

	;DETERMINE BLOCK SIZE
	LIM L, AUX0, $7F
	XOR L, R3, AUX0
	BRNZ FUB_BIG

	;INCREMENT BY 16k WORDS
	LIM H, AUX0, $40
	LIM L, AUX0, $00
	ADD W, R4, R4
	MOVE W, ZERO, AUX0
	ADDC W, R3, R3
	BRA FUB_UPDATE

FUB_BIG
	LIM W, AUX0, $01
	ADD W, R3, R3

FUB_UPDATE
	LIM H, AUX1, `LH FLASH_ADDRESS_H
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, R3, DD

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, R4, DD

	BITT W, R3, 7
	BRZ FUB_LOOP
	NOP

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM H, AUX0, $00
	LIM L, AUX0, $FF
	MOVE W, AUX0, ID	;SEND READ ARRAY COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FUB_WAIT_READ
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FUB_WAIT_READ	;IF NOT SET KEEP WAITING
	NOP

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_LOCK_ALL_BLOCKS
	LIM H, AUX1, `LH FLASH_ADDRESS_H
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, ZERO, DD

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, ZERO, DD

FLAB_LOOP
	LIM H, AUX0, `LH FLASH_SET_ADDRESS_WRITE
	LIM L, AUX0, `LL FLASH_SET_ADDRESS_WRITE
	MOVE W, AUX0, CAL
	CALL
	NOP

	LIM H, AUX0, `LH FLASH_LOCK_BLOCK
	LIM L, AUX0, `LL FLASH_LOCK_BLOCK
	MOVE W, AUX0, CAL
	CALL
	NOP

	;GET FLASH ADDRESS IN R3, R4
	LIM H, AUX1, `LH FLASH_ADDRESS_H
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, DD, R3

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, DD, R4

	LIM H, AUX0, `LH HEX_INDICATORS
	LIM L, AUX0, `LL HEX_INDICATORS
	MOVE W, AUX0, IAL
	MOVE W, R3, ID

	;DETERMINE BLOCK SIZE
	LIM L, AUX0, $7F
	XOR L, R3, AUX0
	BRNZ FLAB_BIG

	;INCREMENT BY 16k WORDS
	LIM H, AUX0, $40
	LIM L, AUX0, $00
	ADD W, R4, R4
	MOVE W, ZERO, AUX0
	ADDC W, R3, R3
	BRA FLAB_UPDATE

FLAB_BIG
	LIM W, AUX0, $01
	ADD W, R3, R3

FLAB_UPDATE
	LIM H, AUX1, `LH FLASH_ADDRESS_H
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, R3, DD

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, R4, DD

	BITT W, R3, 7
	BRZ FLAB_LOOP
	NOP

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM H, AUX0, $00
	LIM L, AUX0, $FF
	MOVE W, AUX0, ID	;SEND READ ARRAY COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FLAB_WAIT_READ
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FLAB_WAIT_READ	;IF NOT SET KEEP WAITING
	NOP

	RET
	NOP
;#############################################################################

;#############################################################################
FLASH_ERASE_ALL_BLOCKS
	LIM H, AUX1, `LH FLASH_ADDRESS_H
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, ZERO, DD

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, ZERO, DD

FEAB_LOOP
	LIM H, AUX0, `LH FLASH_SET_ADDRESS_WRITE
	LIM L, AUX0, `LL FLASH_SET_ADDRESS_WRITE
	MOVE W, AUX0, CAL
	CALL
	NOP

	LIM H, AUX0, `LH FLASH_ERASE_BLOCK
	LIM L, AUX0, `LL FLASH_ERASE_BLOCK
	MOVE W, AUX0, CAL
	CALL
	NOP

	;GET FLASH ADDRESS IN R3, R4
	LIM H, AUX1, `LH FLASH_ADDRESS_H
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, DD, R3

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, DD, R4

	LIM H, AUX0, `LH HEX_INDICATORS
	LIM L, AUX0, `LL HEX_INDICATORS
	MOVE W, AUX0, IAL
	MOVE W, R3, ID

	;DETERMINE BLOCK SIZE
	LIM L, AUX0, $7F
	XOR L, R3, AUX0
	BRNZ FEAB_BIG

	;INCREMENT BY 16k WORDS
	LIM H, AUX0, $40
	LIM L, AUX0, $00
	ADD W, R4, R4
	MOVE W, ZERO, AUX0
	ADDC W, R3, R3
	BRA FEAB_UPDATE

FEAB_BIG
	LIM W, AUX0, $01
	ADD W, R3, R3

FEAB_UPDATE
	LIM H, AUX1, `LH FLASH_ADDRESS_H
	LIM L, AUX1, `LL FLASH_ADDRESS_H
	MOVE W, AUX1, DAL
	MOVE W, R3, DD

	LIM H, AUX1, `LH FLASH_ADDRESS_L
	LIM L, AUX1, `LL FLASH_ADDRESS_L
	MOVE W, AUX1, DAL
	MOVE W, R4, DD

	BITT W, R3, 7
	BRZ FEAB_LOOP
	NOP

	LIM H, AUX0, `LH IOMM0_MEM_DATA
	LIM L, AUX0, `LL IOMM0_MEM_DATA
	MOVE W, AUX0, IAL
	LIM H, AUX0, $00
	LIM L, AUX0, $FF
	MOVE W, AUX0, ID	;SEND READ ARRAY COMMAND

	LIM H, AUX0, `LH IOMM0_STATUS
	LIM L, AUX0, `LL IOMM0_STATUS
	MOVE W, AUX0, IAL
FEAB_WAIT_READ
	BITT W, ID, 0		;CHECK WRITE READY FLAG
	BRZ FEAB_WAIT_READ	;IF NOT SET KEEP WAITING
	NOP

	RET
	NOP
;#############################################################################
